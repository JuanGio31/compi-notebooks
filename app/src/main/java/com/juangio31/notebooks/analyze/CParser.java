
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.juangio31.notebooks.analyze;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return CParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public CParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\014\000\002\002\004\000\002\004\004\000\002\004" +
    "\003\000\002\004\003\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\014\003\006\004\005\006\010\012\004\016" +
    "\007\001\002\000\012\004\005\006\010\012\004\016\007" +
    "\001\002\000\024\002\ufff6\004\ufff6\006\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\016\ufff6\017\ufff6\001\002\000\014" +
    "\002\ufffe\004\ufffe\006\ufffe\012\ufffe\016\ufffe\001\002\000" +
    "\012\004\005\006\010\012\004\016\007\001\002\000\024" +
    "\002\ufff7\004\ufff7\006\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\016\ufff7\017\ufff7\001\002\000\022\002\uffff\004\uffff" +
    "\006\uffff\011\017\012\015\013\016\014\020\016\uffff\001" +
    "\002\000\014\002\014\004\005\006\010\012\004\016\007" +
    "\001\002\000\022\002\000\004\000\006\000\011\017\012" +
    "\015\013\016\014\020\016\000\001\002\000\004\002\001" +
    "\001\002\000\012\004\005\006\010\012\004\016\007\001" +
    "\002\000\012\004\005\006\010\012\004\016\007\001\002" +
    "\000\012\004\005\006\010\012\004\016\007\001\002\000" +
    "\012\004\005\006\010\012\004\016\007\001\002\000\024" +
    "\002\ufff9\004\ufff9\006\ufff9\011\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\016\ufff9\017\ufff9\001\002\000\024\002\ufffc\004\ufffc" +
    "\006\ufffc\011\ufffc\012\ufffc\013\016\014\020\016\ufffc\017" +
    "\ufffc\001\002\000\024\002\ufffa\004\ufffa\006\ufffa\011\ufffa" +
    "\012\ufffa\013\ufffa\014\ufffa\016\ufffa\017\ufffa\001\002\000" +
    "\024\002\ufffb\004\ufffb\006\ufffb\011\ufffb\012\ufffb\013\016" +
    "\014\020\016\ufffb\017\ufffb\001\002\000\014\011\017\012" +
    "\015\013\016\014\020\017\026\001\002\000\024\002\ufff8" +
    "\004\ufff8\006\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\016" +
    "\ufff8\017\ufff8\001\002\000\024\002\ufffd\004\ufffd\006\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd\017\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\006\003\010\004\011\001\001\000\004\003" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\023\001\001\000\004\003\022\001\001\000" +
    "\004\003\021\001\001\000\004\003\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
            System.out.println(
                  "Error sintactico, Recuperable. No se esperaba el componente "
                  + s.value
                  + " en [ "
                  + s.left
                  + ", "
                  + s.right
                  + " ]"
            );
    }

    public void unrecovered_syntac_error(Symbol s){
            System.out.println(
                  "Error sintactico. No recuperable. No se esperaba el componente "
                  + s.value
                  + " en [ "
                  + s.left
                  + ", "
                  + s.right
                  + " ]"
            );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CParser$actions {
  private final CParser parser;

  /** Constructor */
  CUP$CParser$actions(CParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$CParser$do_action_part00000000(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$CParser$result;

      /* select the action based on the action number */
      switch (CUP$CParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int start_valright = ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		RESULT = start_val;
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CParser$parser.done_parsing();
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= inicio expr 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("inicio",2, ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= expr 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("inicio",2, ((Symbol)CUP$CParser$stack.peek()), ((Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("inicio",2, ((Symbol)CUP$CParser$stack.peek()), ((Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= RESTA expr 
            {
              Object RESULT =null;
		int aleft = ((Symbol)CUP$CParser$stack.peek()).left;
		int aright = ((Symbol)CUP$CParser$stack.peek()).right;
		Object a = (Object)((Symbol) CUP$CParser$stack.peek()).value;
		  System.out.println("-Digito");  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr SUMA expr 
            {
              Object RESULT =null;
		int aleft = ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int aright = ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object a = (Object)((Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int bleft = ((Symbol)CUP$CParser$stack.peek()).left;
		int bright = ((Symbol)CUP$CParser$stack.peek()).right;
		Object b = (Object)((Symbol) CUP$CParser$stack.peek()).value;
		  System.out.println("suma");  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr RESTA expr 
            {
              Object RESULT =null;
		int aleft = ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int aright = ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object a = (Object)((Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int bleft = ((Symbol)CUP$CParser$stack.peek()).left;
		int bright = ((Symbol)CUP$CParser$stack.peek()).right;
		Object b = (Object)((Symbol) CUP$CParser$stack.peek()).value;
		  System.out.println("resta");  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr MULT expr 
            {
              Object RESULT =null;
		int aleft = ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int aright = ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object a = (Object)((Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int bleft = ((Symbol)CUP$CParser$stack.peek()).left;
		int bright = ((Symbol)CUP$CParser$stack.peek()).right;
		Object b = (Object)((Symbol) CUP$CParser$stack.peek()).value;
		  System.out.println("multiplicacion");  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr DIV expr 
            {
              Object RESULT =null;
		int aleft = ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int aright = ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object a = (Object)((Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int bleft = ((Symbol)CUP$CParser$stack.peek()).left;
		int bright = ((Symbol)CUP$CParser$stack.peek()).right;
		Object b = (Object)((Symbol) CUP$CParser$stack.peek()).value;
		  System.out.println("division");  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= PAR_I expr PAR_D 
            {
              Object RESULT =null;
		int aleft = ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int aright = ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object a = (Object)((Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		  RESULT = a;  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= DIGITO 
            {
              Object RESULT =null;
		int aleft = ((Symbol)CUP$CParser$stack.peek()).left;
		int aright = ((Symbol)CUP$CParser$stack.peek()).right;
		String a = (String)((Symbol) CUP$CParser$stack.peek()).value;
		  RESULT = a;  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((Symbol)CUP$CParser$stack.peek()), ((Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= ID 
            {
              Object RESULT =null;
		int aleft = ((Symbol)CUP$CParser$stack.peek()).left;
		int aright = ((Symbol)CUP$CParser$stack.peek()).right;
		String a = (String)((Symbol) CUP$CParser$stack.peek()).value;
		  RESULT = a;  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((Symbol)CUP$CParser$stack.peek()), ((Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$CParser$do_action(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws Exception
    {
              return CUP$CParser$do_action_part00000000(
                               CUP$CParser$act_num,
                               CUP$CParser$parser,
                               CUP$CParser$stack,
                               CUP$CParser$top);
    }
}

}
