/* Definir el paquete */
package com.juangio31.notebooks.analyzers;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.juangio31.notebooks.arbol.*;

class MParser;

parser code {:
    public void syntax_error(Symbol s){
            System.out.println(
                  "Error sintactico, Recuperable. No se esperaba el componente "
                  + s.value
                  + " en [ "
                  + s.left
                  + ", "
                  + s.right
                  + " ]"
            );
    }

    public void unrecovered_syntac_error(Symbol s){
            System.out.println(
                  "Error sintactico. No recuperable. No se esperaba el componente "
                  + s.value
                  + " en [ "
                  + s.left
                  + ", "
                  + s.right
                  + " ]"
            );
    }

//         listaErrores.add(new Errores(
//                         TipoError.SINTACTICO,
//                         ", Recuperable. No se esperaba el componente "+s.value,
//                         s.left,
//                         s.right));
//     }
:}

/* Declaración de terminales (tokens) */
terminal String BOLD, ITALIC, BOLD_ITALIC, LIST_ITEM_NUM, TEXT;
terminal LIST_ITEM_HYPHEN;
terminal String HEADER1, HEADER2, HEADER3, HEADER4, HEADER5, HEADER6, HD;
terminal ENDL;

/* Declaración de no terminales */
nonterminal LinkedList<Instruccion> INICIO;
nonterminal LinkedList<Instruccion> INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal String EXPR;
nonterminal Instruccion HEADER;
nonterminal Instruccion LISTAS;
nonterminal Instruccion PARRAFO;
nonterminal Instruccion ELEMENTO;
nonterminal LinkedList<Instruccion> ORDEN;
nonterminal LinkedList<Instruccion> TXT_MULTI, TXT_LINEA;
nonterminal Instruccion ELINEA, EMLINEA;

start with INICIO;

INICIO ::= INSTRUCCIONES:a          {:  RESULT = a; :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b     {:  RESULT = a; RESULT.add(b);  :}
                | INSTRUCCION:a                     {:  RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= HEADER:a            {:  RESULT = a; :}
              | PARRAFO:a ENDL           {:  RESULT = a; :}
              | LISTAS:a ENDL           {:RESULT =a;:}
              | error ENDL
;

//PARRAFO ::= EMLINEA:a     {:RESULT = a;:}
//        | TXT_LINEA:a ENDL    {:RESULT = a;:}
//        | TXT_MULTI:a     {:RESULT = a;:}
//;

EXPR ::= HEADER6 | HEADER5 | HEADER4 | HEADER3 | HEADER2 | HEADER1
;

HEADER ::= HD:a ELINEA:e ENDL          {:  RESULT = new Header(new Literal(a, Tipo.TEXTO, aleft, aright), e, eleft, eright);  :}
    //    | EXPR:a TXT_LINEA:e ENDL          {:  RESULT = new Header(a, e, aleft, aright);  :}
;

LISTAS ::=  ORDEN:a    {:RESULT = new Lista((LinkedList<Instruccion>)a, Tipo.OL, aleft, aright);:}
;

ELEMENTO ::= LIST_ITEM_NUM:b TXT_LINEA:a
            {:  RESULT = new Elemento(new Literal(b, Tipo.TEXTO, bleft, bright), a, Tipo.OL, aleft, aright); :}
            | LIST_ITEM_HYPHEN TXT_LINEA:a
            {:  RESULT = new Elemento(a, Tipo.UL, aleft, aright); :}
;

ORDEN ::= ORDEN:a ELEMENTO:b      {:  RESULT = a; RESULT.add(b);  :}
            | ELEMENTO:a                    {:  RESULT = new LinkedList<>(); RESULT.add(a); :}
;

PARRAFO ::=  EMLINEA:a  {:RESULT = new Parrafo(a, Tipo.PARRAFO, aleft, aright);:}
 //           | TXT_LINEA:a       {:RESULT = new Normal(a, aleftm, aright);:}
;

TXT_LINEA ::= TXT_LINEA:b TEXT:a       {:  RESULT = b; RESULT.add(new Literal(a, Tipo.TEXTO, aleft, aright)); :}
            | TEXT:a                    {:  RESULT = new LinkedList<>(); RESULT.add(new Literal(a, Tipo.TEXTO, aleft, aright)); :}
;

ELINEA ::= BOLD_ITALIC TXT_LINEA:a BOLD_ITALIC    {:  RESULT = new Estilo(a, Tipo.BOLD_ITALIC, aleft, aright);  :}
          | BOLD TXT_LINEA:a BOLD                   {:  RESULT = new Estilo(a, Tipo.BOLD, aleft, aright);  :}
          | ITALIC TXT_LINEA:a ITALIC               {:  RESULT = new Estilo(a, Tipo.ITALIC, aleft, aright);  :}
;

TXT_MULTI ::= TXT_MULTI:b TEXT:a ENDL      {:  RESULT = b; RESULT.add(new Literal(a, Tipo.TEXTO, aleft, aright)); :}
            | TEXT:a ENDL                    {:  RESULT = new LinkedList<>(); RESULT.add(new Literal(a, Tipo.TEXTO, aleft, aright)); :}
;

EMLINEA ::= BOLD_ITALIC TXT_MULTI:a BOLD_ITALIC    {:  RESULT = new Estilo(a, Tipo.BOLD_ITALIC, aleft, aright);  :}
          | BOLD_ITALIC TXT_LINEA:a BOLD_ITALIC    {:  RESULT = new Estilo(a, Tipo.BOLD_ITALIC, aleft, aright);  :}
          | BOLD TXT_MULTI:a BOLD                   {:  RESULT = new Estilo(a, Tipo.BOLD, aleft, aright);  :}
          | BOLD TXT_LINEA:a BOLD                   {:  RESULT = new Estilo(a, Tipo.BOLD, aleft, aright);  :}
          | ITALIC TXT_MULTI:a ITALIC               {:  RESULT = new Estilo(a, Tipo.ITALIC, aleft, aright);  :}
          | ITALIC TXT_LINEA:a ITALIC               {:  RESULT = new Estilo(a, Tipo.ITALIC, aleft, aright);  :}
          | TXT_MULTI:a      {:RESULT = new Normal(a, aleft, aright);:}
;