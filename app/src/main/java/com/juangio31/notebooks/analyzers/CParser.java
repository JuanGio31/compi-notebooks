
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzers;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import arbol.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return CParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public CParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\003\003\000\002\004" +
    "\004\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\004\000\002\006\006\000\002\007\007\000" +
    "\002\002\004\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\010\003\010\004\004\010\007\001\002\000" +
    "\004\021\046\001\002\000\012\002\000\003\010\004\004" +
    "\010\007\001\002\000\012\002\ufffc\003\ufffc\004\ufffc\010" +
    "\ufffc\001\002\000\004\017\016\001\002\000\004\022\015" +
    "\001\002\000\012\002\ufffd\003\ufffd\004\ufffd\010\ufffd\001" +
    "\002\000\012\002\ufffe\003\ufffe\004\ufffe\010\ufffe\001\002" +
    "\000\004\002\014\001\002\000\004\002\001\001\002\000" +
    "\012\002\ufffb\003\ufffb\004\ufffb\010\ufffb\001\002\000\016" +
    "\004\020\005\021\006\025\007\022\013\017\017\023\001" +
    "\002\000\016\004\020\005\021\006\025\007\022\013\017" +
    "\017\023\001\002\000\020\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\020\uffef\022\uffef\001\002\000\020\012\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\020\uffee\022\uffee\001" +
    "\002\000\020\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\020\ufff0\022\ufff0\001\002\000\016\004\020\005\021\006" +
    "\025\007\022\013\017\017\023\001\002\000\016\012\032" +
    "\013\026\014\030\015\033\016\031\020\027\001\002\000" +
    "\020\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\020\ufff1" +
    "\022\ufff1\001\002\000\016\004\020\005\021\006\025\007" +
    "\022\013\017\017\023\001\002\000\004\022\040\001\002" +
    "\000\016\004\020\005\021\006\025\007\022\013\017\017" +
    "\023\001\002\000\016\004\020\005\021\006\025\007\022" +
    "\013\017\017\023\001\002\000\016\004\020\005\021\006" +
    "\025\007\022\013\017\017\023\001\002\000\016\004\020" +
    "\005\021\006\025\007\022\013\017\017\023\001\002\000" +
    "\020\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\031\020\ufff4" +
    "\022\ufff4\001\002\000\020\012\ufff7\013\ufff7\014\030\015" +
    "\033\016\031\020\ufff7\022\ufff7\001\002\000\020\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\016\031\020\ufff3\022\ufff3\001" +
    "\002\000\020\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\031" +
    "\020\ufff5\022\ufff5\001\002\000\012\002\ufff9\003\ufff9\004" +
    "\ufff9\010\ufff9\001\002\000\020\012\ufff6\013\ufff6\014\030" +
    "\015\033\016\031\020\ufff6\022\ufff6\001\002\000\016\012" +
    "\032\013\026\014\030\015\033\016\031\020\043\001\002" +
    "\000\020\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\020" +
    "\ufff2\022\ufff2\001\002\000\020\012\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\016\031\020\ufff8\022\ufff8\001\002\000\012\002" +
    "\uffff\003\uffff\004\uffff\010\uffff\001\002\000\016\004\020" +
    "\005\021\006\025\007\022\013\017\017\023\001\002\000" +
    "\016\012\032\013\026\014\030\015\033\016\031\022\050" +
    "\001\002\000\012\002\ufffa\003\ufffa\004\ufffa\010\ufffa\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\014\003\012\004\004\005\011\006\010\007" +
    "\005\001\001\000\002\001\001\000\010\005\044\006\010" +
    "\007\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\023\001\001\000\004\002\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\040" +
    "\001\001\000\002\001\001\000\004\002\036\001\001\000" +
    "\004\002\035\001\001\000\004\002\034\001\001\000\004" +
    "\002\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\046\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
            System.out.println(
                  "Error sintactico, Recuperable. No se esperaba el componente "
                  + s.value
                  + " en [ "
                  + s.left
                  + ", "
                  + s.right
                  + " ]"
            );
    }

    public void unrecovered_syntac_error(Symbol s){
            System.out.println(
                  "Error sintactico. No recuperable. No se esperaba el componente "
                  + s.value
                  + " en [ "
                  + s.left
                  + ", "
                  + s.right
                  + " ]"
            );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CParser$actions {
  private final CParser parser;

  /** Constructor */
  CUP$CParser$actions(CParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action_part00000000(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CParser$result;

      /* select the action based on the action number */
      switch (CUP$CParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		RESULT = start_val;
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CParser$parser.done_parsing();
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		  RESULT = a; 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= declaracion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		  RESULT = a;   
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= print 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		  RESULT = a;   
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= error FINLINEA 
            {
              Instruccion RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= ID IGUAL expr FINLINEA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		  RESULT = new Asignacion(a, b, aleft, aright); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // print ::= PRINT PAR_I expr PAR_D FINLINEA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		  RESULT = new Print(a, aleft, aright);   
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("print",5, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= RESTA expr 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		  RESULT = new Aritmeticos(a, Operacion.NEGACION, aleft, aright);  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr SUMA expr 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		  RESULT = new Aritmeticos(a, b, Operacion.SUMA, aleft, aright);  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr RESTA expr 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		  RESULT = new Aritmeticos(a, b, Operacion.RESTA, aleft, aright);  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr MULT expr 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		  RESULT = new Aritmeticos(a, b, Operacion.MULTIPLICACION, aleft, aright);  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr DIV expr 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		  RESULT = new Aritmeticos(a, b, Operacion.DIVISION, aleft, aright);  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr POTENCIA expr 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		  RESULT = new Aritmeticos(a, b, Operacion.POTENCIA, aleft, aright);  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= PAR_I expr PAR_D 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		  RESULT = a;  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= INT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		  RESULT = new Literal(Integer.parseInt(a), Tipo.INT, aleft, aright);  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= DOUBLE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		  RESULT = new Literal(Double.parseDouble(a), Tipo.DOUBLE, aleft, aright);  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		  RESULT = new AccesoVariable(a, aleft, aright);  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= TEXTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		  RESULT = new Literal(a, Tipo.TEXTO, aleft, aright);  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
              return CUP$CParser$do_action_part00000000(
                               CUP$CParser$act_num,
                               CUP$CParser$parser,
                               CUP$CParser$stack,
                               CUP$CParser$top);
    }
}

}
