
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzers;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\026\003\012\004\004\005\020\006\017\007" +
    "\016\010\015\011\014\017\007\020\011\021\013\001\002" +
    "\000\026\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\017\ufffb\020\ufffb\021\ufffb\001\002\000\026" +
    "\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011" +
    "\ufffd\017\ufffd\020\ufffd\021\ufffd\001\002\000\026\002\022" +
    "\004\004\005\020\006\017\007\016\010\015\011\014\017" +
    "\007\020\011\021\013\001\002\000\026\002\ufff3\004\ufff3" +
    "\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\001\002\000\026\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\001\002\000\026\002\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\017\ufff5\020\ufff5\021\ufff5\001" +
    "\002\000\026\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\017\ufffc\020\ufffc\021\ufffc\001\002\000" +
    "\026\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\017\ufff4\020\ufff4\021\ufff4\001\002\000\026\002" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\001\002\000\026\002\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\001\002\000\026\002\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\001\002\000\026\002\ufff9\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\001\002\000\026\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\017\ufffa\020\ufffa\021\ufffa\001\002" +
    "\000\026\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010" +
    "\uffff\011\uffff\017\uffff\020\uffff\021\uffff\001\002\000\004" +
    "\002\001\001\002\000\026\002\000\004\000\005\000\006" +
    "\000\007\000\010\000\011\000\017\000\020\000\021\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\010\002\007\003\005\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\022\004\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
            System.out.println(
                  "Error sintactico, Recuperable. No se esperaba el componente "
                  + s.value
                  + " en [ "
                  + s.left
                  + ", "
                  + s.right
                  + " ]"
            );
    }

    public void unrecovered_syntac_error(Symbol s){
            System.out.println(
                  "Error sintactico. No recuperable. No se esperaba el componente "
                  + s.value
                  + " en [ "
                  + s.left
                  + ", "
                  + s.right
                  + " ]"
            );
    }

//         listaErrores.add(new Errores(
//                         TipoError.SINTACTICO,
//                         ", Recuperable. No se esperaba el componente "+s.value,
//                         s.left,
//                         s.right));
//     }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MParser$actions {
  private final MParser parser;

  /** Constructor */
  CUP$MParser$actions(MParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MParser$do_action_part00000000(
    int                        CUP$MParser$act_num,
    java_cup.runtime.lr_parser CUP$MParser$parser,
    java.util.Stack            CUP$MParser$stack,
    int                        CUP$MParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MParser$result;

      /* select the action based on the action number */
      switch (CUP$MParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		RESULT = start_val;
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MParser$parser.done_parsing();
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= inicio header 
            {
              Object RESULT =null;

              CUP$MParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= inicio estilo 
            {
              Object RESULT =null;

              CUP$MParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= header 
            {
              Object RESULT =null;

              CUP$MParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= estilo 
            {
              Object RESULT =null;

              CUP$MParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= error 
            {
              Object RESULT =null;

              CUP$MParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header ::= HEADER_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		  System.out.println("declaracion de header1 > " + a.toString());   
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("header",0, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header ::= HEADER_2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		  System.out.println("declaracion de header2 > " + a.toString());   
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("header",0, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // header ::= HEADER_3 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		  System.out.println("declaracion de header3 > " + a.toString());   
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("header",0, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // header ::= HEADER_4 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		  System.out.println("declaracion de header4 > " + a.toString());   
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("header",0, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // header ::= HEADER_5 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		  System.out.println("declaracion de header5 > " + a.toString());   
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("header",0, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // header ::= HEADER_6 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		  System.out.println("declaracion de header6 > " + a.toString());   
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("header",0, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // estilo ::= BOLD 
            {
              Object RESULT =null;
		      System.out.println("bold");     
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("estilo",2, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // estilo ::= BOLD_ITALIC 
            {
              Object RESULT =null;
		      System.out.println("bold italic");     
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("estilo",2, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // estilo ::= ITALIC 
            {
              Object RESULT =null;
		      System.out.println("italic");     
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("estilo",2, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MParser$do_action(
    int                        CUP$MParser$act_num,
    java_cup.runtime.lr_parser CUP$MParser$parser,
    java.util.Stack            CUP$MParser$stack,
    int                        CUP$MParser$top)
    throws java.lang.Exception
    {
              return CUP$MParser$do_action_part00000000(
                               CUP$MParser$act_num,
                               CUP$MParser$parser,
                               CUP$MParser$stack,
                               CUP$MParser$top);
    }
}

}
