
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.juangio31.notebooks.analyzers;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.juangio31.notebooks.arbol.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\005\000\002\007" +
    "\003\000\002\011\004\000\002\011\004\000\002\012\004" +
    "\000\002\012\003\000\002\010\003\000\002\014\004\000" +
    "\002\014\003\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\013\005\000\002\013\004\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\022\003\016\004\024\005\017\006\012\007" +
    "\022\010\021\011\014\020\004\001\002\000\010\004\063" +
    "\005\060\006\061\001\002\000\024\002\ufffe\003\ufffe\004" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\020\ufffe" +
    "\001\002\000\024\002\000\003\016\004\024\005\017\006" +
    "\012\007\022\010\021\011\014\020\004\001\002\000\006" +
    "\010\034\021\uffdf\001\002\000\004\021\056\001\002\000" +
    "\010\007\022\011\014\021\ufff2\001\002\000\004\010\027" +
    "\001\002\000\004\021\050\001\002\000\004\010\040\001" +
    "\002\000\010\007\uffee\011\uffee\021\uffee\001\002\000\004" +
    "\021\046\001\002\000\004\010\027\001\002\000\024\002" +
    "\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\020\ufffd\001\002\000\004\021\037\001\002\000" +
    "\004\010\040\001\002\000\004\021\uffed\001\002\000\004" +
    "\010\027\001\002\000\004\002\026\001\002\000\004\002" +
    "\001\001\002\000\014\004\uffeb\005\uffeb\006\uffeb\010\uffeb" +
    "\021\037\001\002\000\006\004\035\010\034\001\002\000" +
    "\006\004\033\010\032\001\002\000\020\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\021\uffec\001\002\000" +
    "\004\021\uffe2\001\002\000\004\021\036\001\002\000\004" +
    "\021\uffe3\001\002\000\014\004\uffe7\005\uffe7\006\uffe7\010" +
    "\uffe7\021\uffe7\001\002\000\014\004\uffe6\005\uffe6\006\uffe6" +
    "\010\uffe6\021\uffe6\001\002\000\020\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\021\uffeb\001\002\000\012" +
    "\007\ufff1\010\032\011\ufff1\021\ufff1\001\002\000\006\005" +
    "\045\010\032\001\002\000\006\005\044\010\034\001\002" +
    "\000\004\021\uffe1\001\002\000\004\021\uffe0\001\002\000" +
    "\024\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\020\ufffa\001\002\000\012\007\ufff0\010" +
    "\032\011\ufff0\021\ufff0\001\002\000\024\002\ufffc\003\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\020" +
    "\ufffc\001\002\000\006\006\054\010\034\001\002\000\006" +
    "\006\053\010\032\001\002\000\004\021\uffe4\001\002\000" +
    "\004\021\uffe5\001\002\000\010\007\uffef\011\uffef\021\uffef" +
    "\001\002\000\024\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\020\ufffb\001\002\000\024" +
    "\002\uffff\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010" +
    "\uffff\011\uffff\020\uffff\001\002\000\004\010\040\001\002" +
    "\000\004\010\040\001\002\000\004\021\066\001\002\000" +
    "\004\010\040\001\002\000\006\004\065\010\032\001\002" +
    "\000\004\021\uffe9\001\002\000\024\002\ufff3\003\ufff3\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\020\ufff3" +
    "\001\002\000\006\006\070\010\032\001\002\000\004\021" +
    "\uffea\001\002\000\006\005\072\010\032\001\002\000\004" +
    "\021\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\026\002\024\003\005\004\004\006\017\007" +
    "\007\010\012\011\014\012\010\013\006\016\022\001\001" +
    "\000\004\015\061\001\001\000\002\001\001\000\022\004" +
    "\056\006\017\007\007\010\012\011\014\012\010\013\006" +
    "\016\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\054\001\001\000\006\013\050\014\051\001\001" +
    "\000\002\001\001\000\004\014\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\042\014\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\040\001" +
    "\001\000\002\001\001\000\006\013\027\014\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\070\001\001\000\004\014" +
    "\066\001\001\000\002\001\001\000\004\014\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
            System.out.println(
                  "Error sintactico, Recuperable. No se esperaba el componente "
                  + s.value
                  + " en [ "
                  + s.left
                  + ", "
                  + s.right
                  + " ]"
            );
    }

    public void unrecovered_syntac_error(Symbol s){
            System.out.println(
                  "Error sintactico. No recuperable. No se esperaba el componente "
                  + s.value
                  + " en [ "
                  + s.left
                  + ", "
                  + s.right
                  + " ]"
            );
    }

//         listaErrores.add(new Errores(
//                         TipoError.SINTACTICO,
//                         ", Recuperable. No se esperaba el componente "+s.value,
//                         s.left,
//                         s.right));
//     }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MParser$actions {
  private final MParser parser;

  /** Constructor */
  CUP$MParser$actions(MParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MParser$do_action_part00000000(
    int                        CUP$MParser$act_num,
    java_cup.runtime.lr_parser CUP$MParser$parser,
    java.util.Stack            CUP$MParser$stack,
    int                        CUP$MParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MParser$result;

      /* select the action based on the action number */
      switch (CUP$MParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		RESULT = start_val;
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MParser$parser.done_parsing();
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		  RESULT = a; 
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);  
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= HEADER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		  RESULT = a; 
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= PARRAFO ENDL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		  RESULT = a; 
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= LISTAS ENDL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		RESULT =a;
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= error ENDL 
            {
              Instruccion RESULT =null;

              CUP$MParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXPR ::= HEADER6 
            {
              String RESULT =null;

              CUP$MParser$result = parser.getSymbolFactory().newSymbol("EXPR",3, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPR ::= HEADER5 
            {
              String RESULT =null;

              CUP$MParser$result = parser.getSymbolFactory().newSymbol("EXPR",3, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPR ::= HEADER4 
            {
              String RESULT =null;

              CUP$MParser$result = parser.getSymbolFactory().newSymbol("EXPR",3, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPR ::= HEADER3 
            {
              String RESULT =null;

              CUP$MParser$result = parser.getSymbolFactory().newSymbol("EXPR",3, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPR ::= HEADER2 
            {
              String RESULT =null;

              CUP$MParser$result = parser.getSymbolFactory().newSymbol("EXPR",3, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPR ::= HEADER1 
            {
              String RESULT =null;

              CUP$MParser$result = parser.getSymbolFactory().newSymbol("EXPR",3, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // HEADER ::= HD ELINEA ENDL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		  RESULT = new Header(new Literal(a, Tipo.TEXTO, aleft, aright), e, eleft, eright);  
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("HEADER",4, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-2)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTAS ::= ORDEN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		RESULT = new Lista((LinkedList<Instruccion>)a, Tipo.OL, aleft, aright);
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("LISTAS",5, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELEMENTO ::= LIST_ITEM_NUM TXT_LINEA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		  RESULT = new Elemento(new Literal(b, Tipo.TEXTO, bleft, bright), a, Tipo.OL, aleft, aright); 
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO",7, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELEMENTO ::= LIST_ITEM_HYPHEN TXT_LINEA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		  RESULT = new Elemento(a, Tipo.UL, aleft, aright); 
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO",7, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ORDEN ::= ORDEN ELEMENTO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);  
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("ORDEN",8, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ORDEN ::= ELEMENTO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("ORDEN",8, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARRAFO ::= EMLINEA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		RESULT = new Parrafo(a, Tipo.PARRAFO, aleft, aright);
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("PARRAFO",6, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TXT_LINEA ::= TXT_LINEA TEXT 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		  RESULT = b; RESULT.add(new Literal(a, Tipo.TEXTO, aleft, aright)); 
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("TXT_LINEA",10, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TXT_LINEA ::= TEXT 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(new Literal(a, Tipo.TEXTO, aleft, aright)); 
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("TXT_LINEA",10, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELINEA ::= BOLD_ITALIC TXT_LINEA BOLD_ITALIC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		  RESULT = new Estilo(a, Tipo.BOLD_ITALIC, aleft, aright);  
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("ELINEA",11, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-2)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELINEA ::= BOLD TXT_LINEA BOLD 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		  RESULT = new Estilo(a, Tipo.BOLD, aleft, aright);  
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("ELINEA",11, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-2)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELINEA ::= ITALIC TXT_LINEA ITALIC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		  RESULT = new Estilo(a, Tipo.ITALIC, aleft, aright);  
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("ELINEA",11, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-2)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TXT_MULTI ::= TXT_MULTI TEXT ENDL 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		  RESULT = b; RESULT.add(new Literal(a, Tipo.TEXTO, aleft, aright)); 
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("TXT_MULTI",9, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-2)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TXT_MULTI ::= TEXT ENDL 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		  RESULT = new LinkedList<>(); RESULT.add(new Literal(a, Tipo.TEXTO, aleft, aright)); 
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("TXT_MULTI",9, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EMLINEA ::= BOLD_ITALIC TXT_MULTI BOLD_ITALIC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		  RESULT = new Estilo(a, Tipo.BOLD_ITALIC, aleft, aright);  
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("EMLINEA",12, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-2)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EMLINEA ::= BOLD_ITALIC TXT_LINEA BOLD_ITALIC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		  RESULT = new Estilo(a, Tipo.BOLD_ITALIC, aleft, aright);  
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("EMLINEA",12, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-2)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EMLINEA ::= BOLD TXT_MULTI BOLD 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		  RESULT = new Estilo(a, Tipo.BOLD, aleft, aright);  
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("EMLINEA",12, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-2)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EMLINEA ::= BOLD TXT_LINEA BOLD 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		  RESULT = new Estilo(a, Tipo.BOLD, aleft, aright);  
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("EMLINEA",12, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-2)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EMLINEA ::= ITALIC TXT_MULTI ITALIC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		  RESULT = new Estilo(a, Tipo.ITALIC, aleft, aright);  
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("EMLINEA",12, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-2)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EMLINEA ::= ITALIC TXT_LINEA ITALIC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.elementAt(CUP$MParser$top-1)).value;
		  RESULT = new Estilo(a, Tipo.ITALIC, aleft, aright);  
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("EMLINEA",12, ((java_cup.runtime.Symbol)CUP$MParser$stack.elementAt(CUP$MParser$top-2)), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EMLINEA ::= TXT_MULTI 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$MParser$stack.peek()).value;
		RESULT = new Normal(a, aleft, aright);
              CUP$MParser$result = parser.getSymbolFactory().newSymbol("EMLINEA",12, ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MParser$stack.peek()), RESULT);
            }
          return CUP$MParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MParser$do_action(
    int                        CUP$MParser$act_num,
    java_cup.runtime.lr_parser CUP$MParser$parser,
    java.util.Stack            CUP$MParser$stack,
    int                        CUP$MParser$top)
    throws java.lang.Exception
    {
              return CUP$MParser$do_action_part00000000(
                               CUP$MParser$act_num,
                               CUP$MParser$parser,
                               CUP$MParser$stack,
                               CUP$MParser$top);
    }
}

}
